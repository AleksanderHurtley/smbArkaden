{"version":3,"sources":["assets/fasade.jpg","assets/tetrisbanner.jpg","assets/sinusbanner.jpg","assets/scavengerbanner.jpg","assets/arcade2.jpg","components/ColorFilter.js","Home.js","About.js","Games.js","NoMatch.js","components/Layout.js","components/NavigationBar.js","components/Jumbotron.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Styles","styled","div","ColorFilter","className","Home","to","src","bilde","About","Games","tetrisbanner","sinusbanner","scavengerbanner","NoMatch","Layout","props","Container","children","NavigationBar","Navbar","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Item","Link","image","Jumbotron","fluid","App","Fragment","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,oC,wCCA3CD,EAAOC,QAAU,IAA0B,0C,mBCA3CD,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,6C,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mcCK3C,IAAMC,EAASC,IAAOC,IAAV,KAYCC,EAAc,kBACzB,kBAACH,EAAD,KACE,yBAAKI,UAAU,eCZNC,EAAO,kBAClB,6BACE,kBAAC,EAAD,MACA,uCACA,2BAAG,6BAAH,mCAAwC,6BAAxC,wBAAkE,6BAAlE,iBAAqF,6BAArF,mBAEA,mCACE,6BACI,kBAAC,IAAD,CAAMC,GAAG,UAAS,yBAAKF,UAAU,eAAeG,IAAKC,WCblDC,EAAQ,kBACjB,6BACE,gD,mDCIOC,EAAQ,kBACjB,6BACE,kBAAC,EAAD,MACA,2CACA,yBAAKN,UAAU,aAAaG,IAAKI,MACjC,yBAAKP,UAAU,aAAaG,IAAKK,MACjC,yBAAKR,UAAU,aAAaG,IAAKM,QCZ1BC,EAAU,kBACnB,6BACE,0C,QCDOC,EAAS,SAACC,GAAD,OACpB,kBAACC,EAAA,EAAD,KACGD,EAAME,W,8RCDX,IAAMlB,EAASC,IAAOC,IAAV,KAkBCiB,EAAgB,kBAC3B,kBAAC,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,OAAO,MACb,kBAACD,EAAA,EAAOE,MAAR,CAAcC,KAAK,iBAAnB,cACA,kBAACH,EAAA,EAAOI,OAAR,CAAeC,gBAAc,qBAC7B,kBAACL,EAAA,EAAOM,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKxB,UAAU,WACb,kBAACwB,EAAA,EAAIC,KAAL,KAAU,kBAACD,EAAA,EAAIE,KAAL,CAAUP,KAAK,iBAAf,SACV,kBAACK,EAAA,EAAIC,KAAL,KAAU,kBAACD,EAAA,EAAIE,KAAL,CAAUP,KAAK,sBAAf,qB,ueCxBpB,IAAMvB,EAASC,IAAOC,IAAV,IAEU6B,KAoBTC,EAAY,kBACvB,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAAC7B,UAAU,SACrB,yBAAKA,UAAU,YACf,kBAACa,EAAA,EAAD,SCDSiB,E,uKAnBX,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWjC,IACjC,kBAAC,IAAD,CAAOgC,KAAK,SAASC,UAAW5B,IAChC,kBAAC,IAAD,CAAO2B,KAAK,SAASC,UAAW7B,IAChC,kBAAC,IAAD,CAAO6B,UAAWxB,Y,GAZdyB,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8c656a39.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fasade.f0edd1e3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/tetrisbanner.d6d3b281.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sinusbanner.b37ee944.jpg\";","module.exports = __webpack_public_path__ + \"static/media/scavengerbanner.9e29f353.jpg\";","module.exports = __webpack_public_path__ + \"static/media/arcade2.9a814d58.jpg\";","import React from 'react';\nimport { Jumbotron as Jumbo, Container } from 'react-bootstrap';\nimport styled from 'styled-components';\nimport image from '../assets/fasade.jpg';\n\nconst Styles = styled.div`\n.overlayz {\n  background-color: #f803fc;\n  opacity: 0.08;\n  position: fixed;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  z-index: -1;\n}\n`\nexport const ColorFilter = () => (\n  <Styles>\n    <div className=\"overlayz\"></div>\n  </Styles>\n)\n","import React from 'react';\nimport bilde from './assets/fasade.jpg';\nimport { Link } from 'react-router-dom';\nimport './css/Styling.css'\nimport { ColorFilter } from './components/ColorFilter';\n\n\nexport const Home = () => (\n  <div>\n    <ColorFilter/>\n    <h1>Welcome</h1>\n    <p><br/>Compete against you colleagues! <br/> Set a new highscore!<br/> Be the best! <br/> Beat the rest!\n    </p>\n    <container>\n      <div>\n          <Link to='/games'><img className=\"enterPicture\" src={bilde}/></Link>\n      </div>\n    </container>\n  </div> \n) \n","import React from 'react'\n\nexport const About = () => (\n    <div>\n      <h2>About times...</h2>\n    </div>\n) ","import React from 'react'\nimport { ColorFilter } from './components/ColorFilter'\nimport './css/Styling.css'\nimport tetrisbanner from './assets/tetrisbanner.jpg'\nimport sinusbanner from './assets/sinusbanner.jpg'\nimport scavengerbanner from './assets/scavengerbanner.jpg'\n\n\nexport const Games = () => (\n    <div>\n      <ColorFilter></ColorFilter>\n      <h1>Arcade Hall</h1>\n      <img className='gameBanner' src={tetrisbanner}></img>\n      <img className='gameBanner' src={sinusbanner}></img>\n      <img className='gameBanner' src={scavengerbanner}></img>\n    </div>\n) ","import React from 'react'\n\nexport const NoMatch = () => (\n    <div>\n      <h2>No Match</h2>    \n    </div>\n) ","import React from 'react';\nimport { Container } from 'react-bootstrap';\n\nexport const Layout = (props) => (\n  <Container>\n    {props.children}\n  </Container>\n) ","import React from 'react';\nimport { Nav, Navbar } from 'react-bootstrap';\nimport styled from 'styled-components';\n\nconst Styles = styled.div`\n.navbar {\n  background-color: #222;\n}\n\n.navbar-brand, .navbar-nav .nav-link {\n  color: #bbb;\n\n  &:hover {\n    color: white;\n  }\n}\n\n.navbar-toggler{\n  background-color: #bbb;\n}\n`;\n\nexport const NavigationBar = () => (\n  <Styles>\n    <Navbar expand=\"lg\">\n      <Navbar.Brand href=\"smbArkaden/#/\">SMB Arcade</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-Navbar.nav\"/>\n      <Navbar.Collapse id=\"basic-Navbar-nav\">\n        <Nav className=\"ml-auto\">\n          <Nav.Item><Nav.Link href=\"smbArkaden/#/\">Home</Nav.Link></Nav.Item>\n          <Nav.Item><Nav.Link href=\"smbArkaden/#/games\">Arcade Hall</Nav.Link></Nav.Item>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  </Styles>\n)","  \nimport React from 'react';\nimport { Jumbotron as Jumbo, Container } from 'react-bootstrap';\nimport styled from 'styled-components';\nimport image from '../assets/arcade2.jpg';\n\nconst Styles = styled.div`\n  .jumbo {\n    background: url(${image}) center;\n    background-size: cover;\n    color: #42f55d;\n    height: 200px;\n    position: relative;\n    z-index: -2;\n    font-family: \"Comic Sans MS\", cursive, sans-serif;\n  }\n  .overlay {\n    background-color: #f803fc;\n    opacity: 0.1;\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    z-index: -1;\n  }\n`;\n\nexport const Jumbotron = () => (\n  <Styles>\n    <Jumbo fluid className=\"jumbo\">\n      <div className=\"overlay\"></div>\n      <Container>\n      </Container>\n    </Jumbo>\n  </Styles>\n)","import React, { Component } from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\nimport { Home } from './Home'\nimport { About } from './About'\nimport { Games } from './Games'\nimport { NoMatch } from './NoMatch'\nimport { Layout } from './components/Layout'\nimport { NavigationBar } from './components/NavigationBar';\nimport { Jumbotron } from './components/Jumbotron';\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <NavigationBar/>\n        <Jumbotron />\n        <Layout>\n          <Router>\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route path=\"/games\" component={Games} />\n              <Route path=\"/about\" component={About} />\n              <Route component={NoMatch} />\n            </Switch>\n          </Router>\n        </Layout>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}